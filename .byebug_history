q
can :read, Note, user: user
user
q
Note.last.user
Note.last
Note.all
Note
q
private_notes.first
exit
private_notes[:alice].user
private_notes[:alice]
private_notes.[:alice]
private_notes.[name]
private_notes.first
private_notes.first.user
private_notes.first
private_notes.last.user
private_notes
users
exit
Note.all
n=Note.first
user
q
n=Note.last
user
q
qy
Note.all
n=Note.last
q
n=Note.last
user
q
User.find_by(user: n.user)
m=User.new
user.object_id
user
User.find(n.user)
User.where(n.user)
n.user
n=Note.last
n=Note.where(user: user)
n=Note.where(user: user).first
n=Note.last
user.can? :read
user
q
user
abilities["alice"].can? :read, private_notes["alice"]
users.first.can? :read, private_notes["alice"]
users.first
c
q
user
user.name
q
Note.last.user
Note.last
user.name
q
user
self
q
self.readers.collect{|r| r.name}.join(", ")
self.readers.collect{|r| r.name}.join
c
note.readers
self
q
n
c
end
visible_to.split(", ").each do |u| self.readers << find_or_create_by(name: u)
visible_to.split(", ").each do |u|
visible_to.split(", ")
self.readers << find_or_create_by(name: 
self
visible_to
c
q
y
q
User.all
pp User.all
User.count
c
User.count
c
User.all
c
User.all
q
users(:alice)
note.readers.first == users(:alice)
note.readers
c
self.readers.first == users(:alice)
self.readers
c
users(:alice)
note
self
c
users(:alice)
self.readers
c
note
self
c
self.readers
self
visible_to.split(", ").each{|u| self.readers.build(name: u).save}
visible_to.split(", ").each do |u|
visible_to.split(", ").each{|u| self.readers.build(name: u) self.save }
visible_to.split(", ")
visible_to
